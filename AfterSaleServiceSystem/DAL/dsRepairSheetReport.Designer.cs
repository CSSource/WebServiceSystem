//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5477
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AfterSaleServiceSystem.DAL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsRepairSheetReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsRepairSheetReport : global::System.Data.DataSet {
        
        private V_SheetReportDataTable tableV_SheetReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsRepairSheetReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsRepairSheetReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["V_SheetReport"] != null)) {
                    base.Tables.Add(new V_SheetReportDataTable(ds.Tables["V_SheetReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_SheetReportDataTable V_SheetReport {
            get {
                return this.tableV_SheetReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsRepairSheetReport cln = ((dsRepairSheetReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["V_SheetReport"] != null)) {
                    base.Tables.Add(new V_SheetReportDataTable(ds.Tables["V_SheetReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableV_SheetReport = ((V_SheetReportDataTable)(base.Tables["V_SheetReport"]));
            if ((initTable == true)) {
                if ((this.tableV_SheetReport != null)) {
                    this.tableV_SheetReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsRepairSheetReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsRepairSheetReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableV_SheetReport = new V_SheetReportDataTable();
            base.Tables.Add(this.tableV_SheetReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_SheetReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsRepairSheetReport ds = new dsRepairSheetReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void V_SheetReportRowChangeEventHandler(object sender, V_SheetReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_SheetReportDataTable : global::System.Data.TypedTableBase<V_SheetReportRow> {
            
            private global::System.Data.DataColumn columnproducttype;
            
            private global::System.Data.DataColumn columnproductnumber;
            
            private global::System.Data.DataColumn columnrepairstateid;
            
            private global::System.Data.DataColumn columnclerkid;
            
            private global::System.Data.DataColumn columncustomid;
            
            private global::System.Data.DataColumn columnprocess;
            
            private global::System.Data.DataColumn columntbreportclerkid;
            
            private global::System.Data.DataColumn columnwarrantyperiod;
            
            private global::System.Data.DataColumn columnmodifytime;
            
            private global::System.Data.DataColumn columnproductname;
            
            private global::System.Data.DataColumn columntbreportproductnumber;
            
            private global::System.Data.DataColumn columnsoftwareVersion;
            
            private global::System.Data.DataColumn columnerrorcode;
            
            private global::System.Data.DataColumn columnbreakdownreason;
            
            private global::System.Data.DataColumn columnbreakdowndescription;
            
            private global::System.Data.DataColumn columnresultofrepair;
            
            private global::System.Data.DataColumn columnlaborcost;
            
            private global::System.Data.DataColumn columnpartcost;
            
            private global::System.Data.DataColumn columntestcost;
            
            private global::System.Data.DataColumn columntransitcost;
            
            private global::System.Data.DataColumn columnstarttime;
            
            private global::System.Data.DataColumn columnendtime;
            
            private global::System.Data.DataColumn columntype_delivery;
            
            private global::System.Data.DataColumn columnawbnumber_delivery;
            
            private global::System.Data.DataColumn columntime_delivery;
            
            private global::System.Data.DataColumn columnguid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_SheetReportDataTable() {
                this.TableName = "V_SheetReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_SheetReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_SheetReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn producttypeColumn {
                get {
                    return this.columnproducttype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn productnumberColumn {
                get {
                    return this.columnproductnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn repairstateidColumn {
                get {
                    return this.columnrepairstateid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clerkidColumn {
                get {
                    return this.columnclerkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn customidColumn {
                get {
                    return this.columncustomid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn processColumn {
                get {
                    return this.columnprocess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tbreportclerkidColumn {
                get {
                    return this.columntbreportclerkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn warrantyperiodColumn {
                get {
                    return this.columnwarrantyperiod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modifytimeColumn {
                get {
                    return this.columnmodifytime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn productnameColumn {
                get {
                    return this.columnproductname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tbreportproductnumberColumn {
                get {
                    return this.columntbreportproductnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn softwareVersionColumn {
                get {
                    return this.columnsoftwareVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn errorcodeColumn {
                get {
                    return this.columnerrorcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn breakdownreasonColumn {
                get {
                    return this.columnbreakdownreason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn breakdowndescriptionColumn {
                get {
                    return this.columnbreakdowndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn resultofrepairColumn {
                get {
                    return this.columnresultofrepair;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn laborcostColumn {
                get {
                    return this.columnlaborcost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn partcostColumn {
                get {
                    return this.columnpartcost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn testcostColumn {
                get {
                    return this.columntestcost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transitcostColumn {
                get {
                    return this.columntransitcost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn starttimeColumn {
                get {
                    return this.columnstarttime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endtimeColumn {
                get {
                    return this.columnendtime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_deliveryColumn {
                get {
                    return this.columntype_delivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awbnumber_deliveryColumn {
                get {
                    return this.columnawbnumber_delivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_deliveryColumn {
                get {
                    return this.columntime_delivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_SheetReportRow this[int index] {
                get {
                    return ((V_SheetReportRow)(this.Rows[index]));
                }
            }
            
            public event V_SheetReportRowChangeEventHandler V_SheetReportRowChanging;
            
            public event V_SheetReportRowChangeEventHandler V_SheetReportRowChanged;
            
            public event V_SheetReportRowChangeEventHandler V_SheetReportRowDeleting;
            
            public event V_SheetReportRowChangeEventHandler V_SheetReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_SheetReportRow(V_SheetReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_SheetReportRow AddV_SheetReportRow(
                        string producttype, 
                        string productnumber, 
                        int repairstateid, 
                        int clerkid, 
                        int customid, 
                        int process, 
                        long tbreportclerkid, 
                        bool warrantyperiod, 
                        System.DateTime modifytime, 
                        string productname, 
                        string tbreportproductnumber, 
                        string softwareVersion, 
                        string errorcode, 
                        string breakdownreason, 
                        string breakdowndescription, 
                        string resultofrepair, 
                        decimal laborcost, 
                        decimal partcost, 
                        decimal testcost, 
                        decimal transitcost, 
                        System.DateTime starttime, 
                        System.DateTime endtime, 
                        string type_delivery, 
                        string awbnumber_delivery, 
                        System.DateTime time_delivery, 
                        string guid) {
                V_SheetReportRow rowV_SheetReportRow = ((V_SheetReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        producttype,
                        productnumber,
                        repairstateid,
                        clerkid,
                        customid,
                        process,
                        tbreportclerkid,
                        warrantyperiod,
                        modifytime,
                        productname,
                        tbreportproductnumber,
                        softwareVersion,
                        errorcode,
                        breakdownreason,
                        breakdowndescription,
                        resultofrepair,
                        laborcost,
                        partcost,
                        testcost,
                        transitcost,
                        starttime,
                        endtime,
                        type_delivery,
                        awbnumber_delivery,
                        time_delivery,
                        guid};
                rowV_SheetReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowV_SheetReportRow);
                return rowV_SheetReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                V_SheetReportDataTable cln = ((V_SheetReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new V_SheetReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproducttype = base.Columns["producttype"];
                this.columnproductnumber = base.Columns["productnumber"];
                this.columnrepairstateid = base.Columns["repairstateid"];
                this.columnclerkid = base.Columns["clerkid"];
                this.columncustomid = base.Columns["customid"];
                this.columnprocess = base.Columns["process"];
                this.columntbreportclerkid = base.Columns["tbreportclerkid"];
                this.columnwarrantyperiod = base.Columns["warrantyperiod"];
                this.columnmodifytime = base.Columns["modifytime"];
                this.columnproductname = base.Columns["productname"];
                this.columntbreportproductnumber = base.Columns["tbreportproductnumber"];
                this.columnsoftwareVersion = base.Columns["softwareVersion"];
                this.columnerrorcode = base.Columns["errorcode"];
                this.columnbreakdownreason = base.Columns["breakdownreason"];
                this.columnbreakdowndescription = base.Columns["breakdowndescription"];
                this.columnresultofrepair = base.Columns["resultofrepair"];
                this.columnlaborcost = base.Columns["laborcost"];
                this.columnpartcost = base.Columns["partcost"];
                this.columntestcost = base.Columns["testcost"];
                this.columntransitcost = base.Columns["transitcost"];
                this.columnstarttime = base.Columns["starttime"];
                this.columnendtime = base.Columns["endtime"];
                this.columntype_delivery = base.Columns["type_delivery"];
                this.columnawbnumber_delivery = base.Columns["awbnumber_delivery"];
                this.columntime_delivery = base.Columns["time_delivery"];
                this.columnguid = base.Columns["guid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproducttype = new global::System.Data.DataColumn("producttype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproducttype);
                this.columnproductnumber = new global::System.Data.DataColumn("productnumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproductnumber);
                this.columnrepairstateid = new global::System.Data.DataColumn("repairstateid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrepairstateid);
                this.columnclerkid = new global::System.Data.DataColumn("clerkid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclerkid);
                this.columncustomid = new global::System.Data.DataColumn("customid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustomid);
                this.columnprocess = new global::System.Data.DataColumn("process", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess);
                this.columntbreportclerkid = new global::System.Data.DataColumn("tbreportclerkid", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntbreportclerkid);
                this.columnwarrantyperiod = new global::System.Data.DataColumn("warrantyperiod", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwarrantyperiod);
                this.columnmodifytime = new global::System.Data.DataColumn("modifytime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodifytime);
                this.columnproductname = new global::System.Data.DataColumn("productname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproductname);
                this.columntbreportproductnumber = new global::System.Data.DataColumn("tbreportproductnumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntbreportproductnumber);
                this.columnsoftwareVersion = new global::System.Data.DataColumn("softwareVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsoftwareVersion);
                this.columnerrorcode = new global::System.Data.DataColumn("errorcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnerrorcode);
                this.columnbreakdownreason = new global::System.Data.DataColumn("breakdownreason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbreakdownreason);
                this.columnbreakdowndescription = new global::System.Data.DataColumn("breakdowndescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbreakdowndescription);
                this.columnresultofrepair = new global::System.Data.DataColumn("resultofrepair", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresultofrepair);
                this.columnlaborcost = new global::System.Data.DataColumn("laborcost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlaborcost);
                this.columnpartcost = new global::System.Data.DataColumn("partcost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpartcost);
                this.columntestcost = new global::System.Data.DataColumn("testcost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntestcost);
                this.columntransitcost = new global::System.Data.DataColumn("transitcost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransitcost);
                this.columnstarttime = new global::System.Data.DataColumn("starttime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstarttime);
                this.columnendtime = new global::System.Data.DataColumn("endtime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendtime);
                this.columntype_delivery = new global::System.Data.DataColumn("type_delivery", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_delivery);
                this.columnawbnumber_delivery = new global::System.Data.DataColumn("awbnumber_delivery", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnawbnumber_delivery);
                this.columntime_delivery = new global::System.Data.DataColumn("time_delivery", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_delivery);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnguid);
                this.columnproducttype.MaxLength = 50;
                this.columnproductnumber.MaxLength = 20;
                this.columnwarrantyperiod.AllowDBNull = false;
                this.columnproductname.MaxLength = 50;
                this.columntbreportproductnumber.MaxLength = 20;
                this.columnsoftwareVersion.MaxLength = 20;
                this.columnerrorcode.MaxLength = 20;
                this.columnbreakdownreason.MaxLength = 2147483647;
                this.columnbreakdowndescription.MaxLength = 2147483647;
                this.columnresultofrepair.MaxLength = 2147483647;
                this.columnlaborcost.AllowDBNull = false;
                this.columnpartcost.AllowDBNull = false;
                this.columntestcost.AllowDBNull = false;
                this.columntransitcost.AllowDBNull = false;
                this.columntype_delivery.MaxLength = 20;
                this.columnawbnumber_delivery.MaxLength = 20;
                this.columnguid.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_SheetReportRow NewV_SheetReportRow() {
                return ((V_SheetReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new V_SheetReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(V_SheetReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_SheetReportRowChanged != null)) {
                    this.V_SheetReportRowChanged(this, new V_SheetReportRowChangeEvent(((V_SheetReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_SheetReportRowChanging != null)) {
                    this.V_SheetReportRowChanging(this, new V_SheetReportRowChangeEvent(((V_SheetReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_SheetReportRowDeleted != null)) {
                    this.V_SheetReportRowDeleted(this, new V_SheetReportRowChangeEvent(((V_SheetReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_SheetReportRowDeleting != null)) {
                    this.V_SheetReportRowDeleting(this, new V_SheetReportRowChangeEvent(((V_SheetReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_SheetReportRow(V_SheetReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsRepairSheetReport ds = new dsRepairSheetReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_SheetReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_SheetReportRow : global::System.Data.DataRow {
            
            private V_SheetReportDataTable tableV_SheetReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_SheetReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_SheetReport = ((V_SheetReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string producttype {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.producttypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“producttype”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.producttypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string productnumber {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.productnumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“productnumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.productnumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int repairstateid {
                get {
                    try {
                        return ((int)(this[this.tableV_SheetReport.repairstateidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“repairstateid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.repairstateidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int clerkid {
                get {
                    try {
                        return ((int)(this[this.tableV_SheetReport.clerkidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“clerkid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.clerkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int customid {
                get {
                    try {
                        return ((int)(this[this.tableV_SheetReport.customidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“customid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.customidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int process {
                get {
                    try {
                        return ((int)(this[this.tableV_SheetReport.processColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“process”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.processColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long tbreportclerkid {
                get {
                    try {
                        return ((long)(this[this.tableV_SheetReport.tbreportclerkidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“tbreportclerkid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.tbreportclerkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool warrantyperiod {
                get {
                    return ((bool)(this[this.tableV_SheetReport.warrantyperiodColumn]));
                }
                set {
                    this[this.tableV_SheetReport.warrantyperiodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime modifytime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableV_SheetReport.modifytimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“modifytime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.modifytimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string productname {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.productnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“productname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.productnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tbreportproductnumber {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.tbreportproductnumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“tbreportproductnumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.tbreportproductnumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string softwareVersion {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.softwareVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“softwareVersion”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.softwareVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string errorcode {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.errorcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“errorcode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.errorcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string breakdownreason {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.breakdownreasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“breakdownreason”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.breakdownreasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string breakdowndescription {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.breakdowndescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“breakdowndescription”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.breakdowndescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resultofrepair {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.resultofrepairColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“resultofrepair”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.resultofrepairColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal laborcost {
                get {
                    return ((decimal)(this[this.tableV_SheetReport.laborcostColumn]));
                }
                set {
                    this[this.tableV_SheetReport.laborcostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal partcost {
                get {
                    return ((decimal)(this[this.tableV_SheetReport.partcostColumn]));
                }
                set {
                    this[this.tableV_SheetReport.partcostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal testcost {
                get {
                    return ((decimal)(this[this.tableV_SheetReport.testcostColumn]));
                }
                set {
                    this[this.tableV_SheetReport.testcostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal transitcost {
                get {
                    return ((decimal)(this[this.tableV_SheetReport.transitcostColumn]));
                }
                set {
                    this[this.tableV_SheetReport.transitcostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime starttime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableV_SheetReport.starttimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“starttime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.starttimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endtime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableV_SheetReport.endtimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“endtime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.endtimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type_delivery {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.type_deliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“type_delivery”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.type_deliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string awbnumber_delivery {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.awbnumber_deliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“awbnumber_delivery”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.awbnumber_deliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime time_delivery {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableV_SheetReport.time_deliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“time_delivery”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.time_deliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    try {
                        return ((string)(this[this.tableV_SheetReport.guidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_SheetReport”中列“guid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_SheetReport.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproducttypeNull() {
                return this.IsNull(this.tableV_SheetReport.producttypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproducttypeNull() {
                this[this.tableV_SheetReport.producttypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproductnumberNull() {
                return this.IsNull(this.tableV_SheetReport.productnumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproductnumberNull() {
                this[this.tableV_SheetReport.productnumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrepairstateidNull() {
                return this.IsNull(this.tableV_SheetReport.repairstateidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrepairstateidNull() {
                this[this.tableV_SheetReport.repairstateidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclerkidNull() {
                return this.IsNull(this.tableV_SheetReport.clerkidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclerkidNull() {
                this[this.tableV_SheetReport.clerkidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustomidNull() {
                return this.IsNull(this.tableV_SheetReport.customidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustomidNull() {
                this[this.tableV_SheetReport.customidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessNull() {
                return this.IsNull(this.tableV_SheetReport.processColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessNull() {
                this[this.tableV_SheetReport.processColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstbreportclerkidNull() {
                return this.IsNull(this.tableV_SheetReport.tbreportclerkidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettbreportclerkidNull() {
                this[this.tableV_SheetReport.tbreportclerkidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodifytimeNull() {
                return this.IsNull(this.tableV_SheetReport.modifytimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodifytimeNull() {
                this[this.tableV_SheetReport.modifytimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproductnameNull() {
                return this.IsNull(this.tableV_SheetReport.productnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproductnameNull() {
                this[this.tableV_SheetReport.productnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstbreportproductnumberNull() {
                return this.IsNull(this.tableV_SheetReport.tbreportproductnumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettbreportproductnumberNull() {
                this[this.tableV_SheetReport.tbreportproductnumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssoftwareVersionNull() {
                return this.IsNull(this.tableV_SheetReport.softwareVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsoftwareVersionNull() {
                this[this.tableV_SheetReport.softwareVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IserrorcodeNull() {
                return this.IsNull(this.tableV_SheetReport.errorcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeterrorcodeNull() {
                this[this.tableV_SheetReport.errorcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbreakdownreasonNull() {
                return this.IsNull(this.tableV_SheetReport.breakdownreasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbreakdownreasonNull() {
                this[this.tableV_SheetReport.breakdownreasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbreakdowndescriptionNull() {
                return this.IsNull(this.tableV_SheetReport.breakdowndescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbreakdowndescriptionNull() {
                this[this.tableV_SheetReport.breakdowndescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresultofrepairNull() {
                return this.IsNull(this.tableV_SheetReport.resultofrepairColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresultofrepairNull() {
                this[this.tableV_SheetReport.resultofrepairColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstarttimeNull() {
                return this.IsNull(this.tableV_SheetReport.starttimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstarttimeNull() {
                this[this.tableV_SheetReport.starttimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsendtimeNull() {
                return this.IsNull(this.tableV_SheetReport.endtimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetendtimeNull() {
                this[this.tableV_SheetReport.endtimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istype_deliveryNull() {
                return this.IsNull(this.tableV_SheetReport.type_deliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settype_deliveryNull() {
                this[this.tableV_SheetReport.type_deliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isawbnumber_deliveryNull() {
                return this.IsNull(this.tableV_SheetReport.awbnumber_deliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setawbnumber_deliveryNull() {
                this[this.tableV_SheetReport.awbnumber_deliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istime_deliveryNull() {
                return this.IsNull(this.tableV_SheetReport.time_deliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settime_deliveryNull() {
                this[this.tableV_SheetReport.time_deliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsguidNull() {
                return this.IsNull(this.tableV_SheetReport.guidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetguidNull() {
                this[this.tableV_SheetReport.guidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_SheetReportRowChangeEvent : global::System.EventArgs {
            
            private V_SheetReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_SheetReportRowChangeEvent(V_SheetReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_SheetReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace AfterSaleServiceSystem.DAL.dsRepairSheetReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class V_SheetReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public V_SheetReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "V_SheetReport";
            tableMapping.ColumnMappings.Add("producttype", "producttype");
            tableMapping.ColumnMappings.Add("productnumber", "productnumber");
            tableMapping.ColumnMappings.Add("repairstateid", "repairstateid");
            tableMapping.ColumnMappings.Add("clerkid", "clerkid");
            tableMapping.ColumnMappings.Add("customid", "customid");
            tableMapping.ColumnMappings.Add("process", "process");
            tableMapping.ColumnMappings.Add("tbreportclerkid", "tbreportclerkid");
            tableMapping.ColumnMappings.Add("warrantyperiod", "warrantyperiod");
            tableMapping.ColumnMappings.Add("modifytime", "modifytime");
            tableMapping.ColumnMappings.Add("productname", "productname");
            tableMapping.ColumnMappings.Add("tbreportproductnumber", "tbreportproductnumber");
            tableMapping.ColumnMappings.Add("softwareVersion", "softwareVersion");
            tableMapping.ColumnMappings.Add("errorcode", "errorcode");
            tableMapping.ColumnMappings.Add("breakdownreason", "breakdownreason");
            tableMapping.ColumnMappings.Add("breakdowndescription", "breakdowndescription");
            tableMapping.ColumnMappings.Add("resultofrepair", "resultofrepair");
            tableMapping.ColumnMappings.Add("laborcost", "laborcost");
            tableMapping.ColumnMappings.Add("partcost", "partcost");
            tableMapping.ColumnMappings.Add("testcost", "testcost");
            tableMapping.ColumnMappings.Add("transitcost", "transitcost");
            tableMapping.ColumnMappings.Add("starttime", "starttime");
            tableMapping.ColumnMappings.Add("endtime", "endtime");
            tableMapping.ColumnMappings.Add("type_delivery", "type_delivery");
            tableMapping.ColumnMappings.Add("awbnumber_delivery", "awbnumber_delivery");
            tableMapping.ColumnMappings.Add("time_delivery", "time_delivery");
            tableMapping.ColumnMappings.Add("guid", "guid");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseAsssConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT producttype, productnumber, repairstateid, clerkid, customid, process, tbreportclerkid, warrantyperiod, modifytime, productname, tbreportproductnumber, softwareVersion, errorcode, breakdownreason, breakdowndescription, resultofrepair, laborcost, partcost, testcost, transitcost, starttime, endtime, type_delivery, awbnumber_delivery, time_delivery, guid FROM dbo.V_SheetReport";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT producttype, productnumber, repairstateid, clerkid, customid, process, tbreportclerkid, warrantyperiod, modifytime, productname, tbreportproductnumber, softwareVersion, errorcode, breakdownreason, breakdowndescription, resultofrepair, laborcost, partcost, testcost, transitcost, starttime, endtime, type_delivery, awbnumber_delivery, time_delivery, guid FROM dbo.V_SheetReport where guid = @guid";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@guid", global::System.Data.SqlDbType.NChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "guid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"UPDATE [dbo].[V_SheetReport] SET
[producttype] = @producttype, 
[productnumber] = @productnumber, 
[repairstateid] = @repairstateid, 
[clerkid] = @clerkid, 
[customid] = @customid, 
[process]  = @process, 
[tbreportclerkid] = @clerkid, 
[warrantyperiod] = @warrantyperiod, 
[modifytime] = @modifytime, 
[productname] = @productname, 
[tbreportproductnumber] = @productnumber, 
[softwareVersion] = @softwareVersion, 
[errorcode] = @errorcode, 
[breakdownreason] = @breakdownreason, 
[breakdowndescription] = @breakdowndescription, 
[resultofrepair] = @resultofrepair, 
[laborcost] = @laborcost, 
[partcost] = @partcost, 
[testcost] = @testcost, 
[transitcost] = @transitcost, 
[starttime] = @starttime, 
[endtime] = @endtime, 
[type_delivery] = @type_delivery, 
[awbnumber_delivery] = @awbnumber_delivery, 
[time_delivery] = @time_delivery 

 where guid = @GUID";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@producttype", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "producttype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@productnumber", global::System.Data.SqlDbType.NChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "productnumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@repairstateid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "repairstateid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@clerkid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "clerkid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "customid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "process", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@warrantyperiod", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "warrantyperiod", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@modifytime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "modifytime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@productname", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "productname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@softwareVersion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "softwareVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@errorcode", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "errorcode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@breakdownreason", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "breakdownreason", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@breakdowndescription", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "breakdowndescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@resultofrepair", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "resultofrepair", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@laborcost", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, "laborcost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@partcost", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, "partcost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@testcost", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, "testcost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@transitcost", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, "transitcost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@starttime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "starttime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endtime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "endtime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_delivery", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "type_delivery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@awbnumber_delivery", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "awbnumber_delivery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_delivery", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "time_delivery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GUID", global::System.Data.SqlDbType.NChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "guid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsRepairSheetReport.V_SheetReportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsRepairSheetReport.V_SheetReportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsRepairSheetReport.V_SheetReportDataTable dataTable = new dsRepairSheetReport.V_SheetReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual dsRepairSheetReport.V_SheetReportDataTable GetDataByGuid(string guid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((guid == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(guid));
            }
            dsRepairSheetReport.V_SheetReportDataTable dataTable = new dsRepairSheetReport.V_SheetReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update1(
                    string producttype, 
                    string productnumber, 
                    global::System.Nullable<int> repairstateid, 
                    global::System.Nullable<int> clerkid, 
                    global::System.Nullable<int> customid, 
                    global::System.Nullable<int> process, 
                    bool warrantyperiod, 
                    global::System.Nullable<global::System.DateTime> modifytime, 
                    string productname, 
                    string softwareVersion, 
                    string errorcode, 
                    string breakdownreason, 
                    string breakdowndescription, 
                    string resultofrepair, 
                    decimal laborcost, 
                    decimal partcost, 
                    decimal testcost, 
                    decimal transitcost, 
                    global::System.Nullable<global::System.DateTime> starttime, 
                    global::System.Nullable<global::System.DateTime> endtime, 
                    string type_delivery, 
                    string awbnumber_delivery, 
                    global::System.Nullable<global::System.DateTime> time_delivery, 
                    string GUID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((producttype == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(producttype));
            }
            if ((productnumber == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(productnumber));
            }
            if ((repairstateid.HasValue == true)) {
                command.Parameters[2].Value = ((int)(repairstateid.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((clerkid.HasValue == true)) {
                command.Parameters[3].Value = ((int)(clerkid.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((customid.HasValue == true)) {
                command.Parameters[4].Value = ((int)(customid.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((process.HasValue == true)) {
                command.Parameters[5].Value = ((int)(process.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            command.Parameters[6].Value = ((bool)(warrantyperiod));
            if ((modifytime.HasValue == true)) {
                command.Parameters[7].Value = ((System.DateTime)(modifytime.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((productname == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(productname));
            }
            if ((softwareVersion == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(softwareVersion));
            }
            if ((errorcode == null)) {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(errorcode));
            }
            if ((breakdownreason == null)) {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(breakdownreason));
            }
            if ((breakdowndescription == null)) {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(breakdowndescription));
            }
            if ((resultofrepair == null)) {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(resultofrepair));
            }
            command.Parameters[14].Value = ((decimal)(laborcost));
            command.Parameters[15].Value = ((decimal)(partcost));
            command.Parameters[16].Value = ((decimal)(testcost));
            command.Parameters[17].Value = ((decimal)(transitcost));
            if ((starttime.HasValue == true)) {
                command.Parameters[18].Value = ((System.DateTime)(starttime.Value));
            }
            else {
                command.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((endtime.HasValue == true)) {
                command.Parameters[19].Value = ((System.DateTime)(endtime.Value));
            }
            else {
                command.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((type_delivery == null)) {
                command.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[20].Value = ((string)(type_delivery));
            }
            if ((awbnumber_delivery == null)) {
                command.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[21].Value = ((string)(awbnumber_delivery));
            }
            if ((time_delivery.HasValue == true)) {
                command.Parameters[22].Value = ((System.DateTime)(time_delivery.Value));
            }
            else {
                command.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((GUID == null)) {
                command.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[23].Value = ((string)(GUID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(dsRepairSheetReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(dsRepairSheetReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(dsRepairSheetReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(dsRepairSheetReport dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591